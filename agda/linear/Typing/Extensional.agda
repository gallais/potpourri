module linear.Typing.Extensional where

open import Data.Nat
open import Function
open import Relation.Binary.PropositionalEquality as PEq

open import linear.Type
open import linear.Context
open import linear.Context.Pointwise as CP
open import linear.Usage
open import linear.Usage.Pointwise as UP
open import linear.Typing

Extensional : {T : ‚Ñï ‚Üí Set} (ùì£ : Typing T) ‚Üí Set
Extensional {T} ùì£ =
 {k : ‚Ñï} {Œ≥ Œ¥ : Context k}  (eqs‚ÇÅ : Context[ _‚â°_ ] Œ¥ Œ≥) (eqs‚ÇÇ : Context[ _‚â°_ ] Œ≥ Œ¥)
 {Œì Œî : Usages Œ≥} {Œì‚Ä≤ Œî‚Ä≤ : Usages Œ¥}
 (EQs‚ÇÅ : Usages[ _‚â°_ , UsageEq ] eqs‚ÇÅ Œì‚Ä≤ Œì) (EQs‚ÇÇ : Usages[ _‚â°_ , UsageEq ] eqs‚ÇÇ Œî Œî‚Ä≤)
 {rt : T k} {œÉ : Type} (t : ùì£ Œì rt œÉ Œî) ‚Üí ùì£ Œì‚Ä≤ rt œÉ Œî‚Ä≤

extensionalFin : Extensional TFin
extensionalFin
  (PEq.refl ‚à∑ eqs‚ÇÅ) (PEq.refl ‚à∑ eqs‚ÇÇ)
  (PEq.refl ‚à∑ EQs‚ÇÅ) (PEq.refl ‚à∑ EQs‚ÇÇ) z
  with CP.pointwiseEq (CP.trans eqs‚ÇÅ eqs‚ÇÇ)
     | UP.pointwiseEq (UP.trans EQs‚ÇÅ EQs‚ÇÇ)
... | PEq.refl | PEq.refl = z
extensionalFin
  (PEq.refl ‚à∑ eqs‚ÇÅ) (PEq.refl ‚à∑ eqs‚ÇÇ)
  (PEq.refl ‚à∑ EQs‚ÇÅ) (PEq.refl ‚à∑ EQs‚ÇÇ) (s k) =
  s extensionalFin eqs‚ÇÅ eqs‚ÇÇ EQs‚ÇÅ EQs‚ÇÇ k


mutual

  extensionalInfer : Extensional TInfer
  extensionalInfer eqs‚ÇÅ eqs‚ÇÇ EQs‚ÇÅ EQs‚ÇÇ (`var k) =
    `var extensionalFin eqs‚ÇÅ eqs‚ÇÇ EQs‚ÇÅ EQs‚ÇÇ k
  extensionalInfer eqs‚ÇÅ eqs‚ÇÇ EQs‚ÇÅ EQs‚ÇÇ (`app f t) =
    let f‚Ä≤ = extensionalInfer eqs‚ÇÅ eqs‚ÇÇ EQs‚ÇÅ (coerce ≥ eqs‚ÇÇ) f
        t‚Ä≤ = extensionalCheck (CP.sym eqs‚ÇÇ) eqs‚ÇÇ (coerceÀ° eqs‚ÇÇ) EQs‚ÇÇ t
    in `app f‚Ä≤ t‚Ä≤
  extensionalInfer eqs‚ÇÅ eqs‚ÇÇ EQs‚ÇÅ EQs‚ÇÇ (`fst t) =
    `fst (extensionalInfer eqs‚ÇÅ eqs‚ÇÇ EQs‚ÇÅ EQs‚ÇÇ t)
  extensionalInfer eqs‚ÇÅ eqs‚ÇÇ EQs‚ÇÅ EQs‚ÇÇ (`snd t) =
    `snd (extensionalInfer eqs‚ÇÅ eqs‚ÇÇ EQs‚ÇÅ EQs‚ÇÇ t)
  extensionalInfer eqs‚ÇÅ eqs‚ÇÇ EQs‚ÇÅ EQs‚ÇÇ (`case t return œÉ of l %% r) =
    let t‚Ä≤ = extensionalInfer eqs‚ÇÅ eqs‚ÇÇ EQs‚ÇÅ (coerce ≥ eqs‚ÇÇ) t
        l‚Ä≤ = extensionalCheck (PEq.refl ‚à∑ CP.sym eqs‚ÇÇ) (PEq.refl ‚à∑ eqs‚ÇÇ)
                              (PEq.refl ‚à∑ coerceÀ° eqs‚ÇÇ) (PEq.refl ‚à∑ EQs‚ÇÇ) l
        r‚Ä≤ = extensionalCheck (PEq.refl ‚à∑ CP.sym eqs‚ÇÇ) (PEq.refl ‚à∑ eqs‚ÇÇ)
                              (PEq.refl ‚à∑ coerceÀ° eqs‚ÇÇ) (PEq.refl ‚à∑ EQs‚ÇÇ) r
    in `case t‚Ä≤ return œÉ of l‚Ä≤ %% r‚Ä≤
  extensionalInfer eqs‚ÇÅ eqs‚ÇÇ EQs‚ÇÅ EQs‚ÇÇ (`cut t) =
    `cut $ extensionalCheck eqs‚ÇÅ eqs‚ÇÇ EQs‚ÇÅ EQs‚ÇÇ t

  extensionalCheck : Extensional TCheck
  extensionalCheck eqs‚ÇÅ eqs‚ÇÇ EQs‚ÇÅ EQs‚ÇÇ (`lam t) =
    `lam extensionalCheck (PEq.refl ‚à∑ eqs‚ÇÅ) (PEq.refl ‚à∑ eqs‚ÇÇ)
                         (PEq.refl ‚à∑ EQs‚ÇÅ ) (PEq.refl ‚à∑ EQs‚ÇÇ) t
  extensionalCheck eqs‚ÇÅ eqs‚ÇÇ EQs‚ÇÅ EQs‚ÇÇ (`let p ‚à∑= t `in u) =
    let t‚Ä≤ = extensionalInfer eqs‚ÇÅ eqs‚ÇÇ EQs‚ÇÅ (coerce ≥ eqs‚ÇÇ) t
        Œ¥  = patternContext p
        u‚Ä≤ = extensionalCheck
               (CP.refl {Œ≥ = Œ¥} CP.++ CP.sym eqs‚ÇÇ) (CP.refl {Œ≥ = Œ¥} CP.++ eqs‚ÇÇ)
               (UP.refl {Œì = [[ Œ¥ ]]} UP.++ coerceÀ° eqs‚ÇÇ) (UP.refl {Œì = ]] Œ¥ [[} UP.++ EQs‚ÇÇ)
               u
    in `let p ‚à∑= t‚Ä≤ `in u‚Ä≤
  extensionalCheck eqs‚ÇÅ eqs‚ÇÇ EQs‚ÇÅ EQs‚ÇÇ (`prd‚äó a b) =
    let a‚Ä≤ = extensionalCheck eqs‚ÇÅ eqs‚ÇÇ EQs‚ÇÅ (coerce ≥ eqs‚ÇÇ) a
        b‚Ä≤ = extensionalCheck (CP.sym eqs‚ÇÇ) eqs‚ÇÇ (coerceÀ° eqs‚ÇÇ) EQs‚ÇÇ b
    in `prd‚äó a‚Ä≤ b‚Ä≤
  extensionalCheck eqs‚ÇÅ eqs‚ÇÇ EQs‚ÇÅ EQs‚ÇÇ (`prd& a b) =
    `prd& (extensionalCheck eqs‚ÇÅ eqs‚ÇÇ EQs‚ÇÅ EQs‚ÇÇ a) (extensionalCheck eqs‚ÇÅ eqs‚ÇÇ EQs‚ÇÅ EQs‚ÇÇ b)
  extensionalCheck eqs‚ÇÅ eqs‚ÇÇ EQs‚ÇÅ EQs‚ÇÇ (`inl t) =
    `inl extensionalCheck eqs‚ÇÅ eqs‚ÇÇ EQs‚ÇÅ EQs‚ÇÇ t
  extensionalCheck eqs‚ÇÅ eqs‚ÇÇ EQs‚ÇÅ EQs‚ÇÇ (`inr t) =
    `inr extensionalCheck eqs‚ÇÅ eqs‚ÇÇ EQs‚ÇÅ EQs‚ÇÇ t
  extensionalCheck eqs‚ÇÅ eqs‚ÇÇ EQs‚ÇÅ EQs‚ÇÇ (`neu t) =
    `neu extensionalInfer eqs‚ÇÅ eqs‚ÇÇ EQs‚ÇÅ EQs‚ÇÇ t
