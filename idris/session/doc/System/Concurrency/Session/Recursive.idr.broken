module System.Concurrency.Session.Recursive

import Control.Linear.LIO

import Data.List.AtIndex
import Data.Nat

import Data.OpenUnion
import System
import System.File
import System.Concurrency as Threads
import System.Concurrency.Linear

import Language.Reflection

%default total

------------------------------------------------------------------------
-- Session types

namespace Session

  public export
  data Kind = Open | Closed

  public export
  data Norm = Head | Expr

  ||| A session type describes the interactions one thread may have with
  ||| another over a shared bidirectional channel: it may send or receive
  ||| values of arbitrary types, or be done communicating.
  public export
  data Session : Kind -> Norm -> Type where
    -- Recursive parts
    Fix  : (s : Session Open Head) -> Session Closed Expr
    Rec  : Session Open Expr
    -- Usual operations
    Send : (ty : Type) -> (s : Session k n) -> Session k Head
    Recv : (ty : Type) -> (s : Session k n) -> Session k Head
    End  : Session k Head

  ||| Dual describes how the other party to the communication sees the
  ||| interactions: our sends become their receives and vice-versa.
  public export
  Dual : Session k m -> Session k m
  Dual (Fix s) = Fix (Dual s)
  Dual Rec = Rec
  Dual (Send ty s) = Recv ty (Dual s)
  Dual (Recv ty s) = Send ty (Dual s)
  Dual End = End

  ||| Duality is involutive: the dual of my dual is me
  export
  dualInvolutive : (s : Session k m) -> Dual (Dual s) === s
  dualInvolutive (Fix s) = cong Fix (dualInvolutive s)
  dualInvolutive Rec = Refl
  dualInvolutive (Send ty s) = cong (Send ty) (dualInvolutive s)
  dualInvolutive (Recv ty s) = cong (Recv ty) (dualInvolutive s)
  dualInvolutive End = Refl

  export
  plug : Session Closed Expr -> Session Open m -> Session Closed m
  plug t Rec = t
  plug t (Send ty s) = Send ty (plug t s)
  plug t (Recv ty s) = Recv ty (plug t s)
  plug t End = End

  ||| Head normalise a session to expose a constructor
  export
  norm : Session Closed m -> Session Closed Head
  norm t@(Fix s) = plug t s
  norm t@(Send ty s) = t
  norm t@(Recv ty s) = t
  norm t@End = t

||| We can collect the list of types that will be sent over the
||| course of a session by walking down its description
||| This definition is purely internal and will not show up in
||| the library's interface.
SendTypes : Session k m -> List Type
SendTypes (Fix s) = SendTypes s
SendTypes Rec = []
SendTypes (Send ty s) = ty :: SendTypes s
SendTypes (Recv ty s) = SendTypes s
SendTypes End = []

||| We can collect the list of types that will be received over
||| the course of a session by walking down its description
||| This definition is purely internal and will not show up in
||| the library's interface.
RecvTypes : Session k m -> List Type
RecvTypes (Fix s) = RecvTypes s
RecvTypes Rec = []
RecvTypes (Send ty s) = RecvTypes s
RecvTypes (Recv ty s) = ty :: RecvTypes s
RecvTypes End = []

||| The types received by my dual are exactly the ones I am sending
||| This definition is purely internal and will not show up in
||| the library's interface.
RecvDualTypes : (s : Session k m) -> RecvTypes (Dual s) === SendTypes s
RecvDualTypes (Fix s) = RecvDualTypes s
RecvDualTypes Rec = Refl
RecvDualTypes (Send ty s) = cong (ty ::) (RecvDualTypes s)
RecvDualTypes (Recv ty s) = RecvDualTypes s
RecvDualTypes End = Refl

||| The types sent by my dual are exactly the ones I receive
||| This definition is purely internal and will not show up in
||| the library's interface.
SendDualTypes : (s : Session k m) -> SendTypes (Dual s) === RecvTypes s
SendDualTypes (Fix s) = SendDualTypes s
SendDualTypes Rec = Refl
SendDualTypes (Send ty s) = SendDualTypes s
SendDualTypes (Recv ty s) = cong (ty ::) (SendDualTypes s)
SendDualTypes End = Refl

namespace Seen

  namespace SeenClosed

    ||| The inductive family (Seen m n) is a zipper describing a
    ||| position somewhere in the protocol. It records the fact
    ||| the position was obtained by composing an interleaving of
    ||| `m` receiving steps and `n` sending ones.
    public export
    data SeenClosed : Nat -> Nat -> Session Closed Head -> Session Closed m2 -> Type where
      None : SeenClosed 0 0 s s
      Recv : (ty : Type) ->
             SeenClosed m n s (Recv ty s') ->
             SeenClosed (S m) n s s'
      Send : (ty : Type) ->
             SeenClosed m n s (Send ty s') ->
             SeenClosed m (S n) s s'

  namespace SeenOpen

    public export
    data SeenOpen : Nat -> Nat -> Session k1 m1 -> Session k2 m2 -> Type where
      None : SeenOpen 0 0 s s
      Recv : (ty : Type) ->
             SeenOpen m n s (Recv ty s') ->
             SeenOpen (S m) n s s'
      Send : (ty : Type) ->
             SeenOpen m n s (Send ty s') ->
             SeenOpen m (S n) s s'
      Open : SeenOpen _ _ s Rec -> SeenOpen m n s s' ->
             SeenOpen m n s s'

  public export
  data Seen : Nat -> Nat -> Session Closed m1 -> Session k2 m2 -> Type where
    MkClosed : SeenClosed m n s s' -> Seen m n s s'
    MkOpen   : SeenClosed m n s (Fix o) ->
               SeenOpen m2 n2 o s' ->
               Seen (m + m2) (n + n2) s (plug (Fix o) s')

  PlugRecvInversion :
    (s : Session Open Head) -> {s' : Session Closed m} ->
    plug (Fix o) s = Recv ty s' ->
    (s2 : Session Open m ** ((s === Recv ty s2), (s' === plug (Fix o) s2)))
  PlugRecvInversion (Recv ty s2) eq = MkDPair ?a (?eq1, ?eq2)

  public export
  Recv : (ty : Type) ->
         s' = Session.Recv ty s'' ->
         Seen m n s s' ->
         Seen (S m) n s s''
  Recv ty Refl (MkClosed s) = MkClosed (Recv ty s)
  Recv ty eq (MkOpen {m, m2} s1 s2) =
    rewrite plusSuccRightSucc m m2 in
    ?azge
     -- MkOpen s1 (Recv ty s2)

atRecvIndexClosed :
   SeenClosed m _ s s' ->
   AtIndex ty (RecvTypes s') n ->
   AtIndex ty (RecvTypes s) (m + n)
atRecvIndexClosed None idx = idx
atRecvIndexClosed (Recv _ s) idx =
  rewrite plusSuccRightSucc (pred m) n in
  atRecvIndexClosed s (S idx)
atRecvIndexClosed (Send _ s) idx =
  atRecvIndexClosed s idx

atRecvIndexOpen :
   SeenOpen m _ s s' ->
   AtIndex ty (RecvTypes s') n ->
   AtIndex ty (RecvTypes s) (m + n)
atRecvIndexOpen None idx = idx
atRecvIndexOpen (Recv _ s) idx =
  rewrite plusSuccRightSucc (pred m) n in
  atRecvIndexOpen s (S idx)
atRecvIndexOpen (Send _ s) idx = atRecvIndexOpen s idx
atRecvIndexOpen (Open _ s) idx = atRecvIndexOpen s idx

atRecvIndex :
  Seen m _ s s' ->
  AtIndex ty (RecvTypes s') n ->
  AtIndex ty (RecvTypes s) (m + n)
atRecvIndex (MkClosed s) idx = atRecvIndexClosed s idx
atRecvIndex (MkOpen {m, m2} s1 s2) idx
  = rewrite sym $ plusAssociative m m2 n in
    ?zgzh -- atRecvIndexClosed s1 ()

{-
||| If we know that `ty` is at index `n` in the list of sent types
||| and that `f` is a function defined using an interleaving of steps
||| comprising `m` sending steps then `ty` is at index `m + n` in `f s`.
atSendIndex : Seen _ m f ->
          (s : Session) ->
          AtIndex ty (SendTypes s) n ->
          AtIndex ty (SendTypes (f s)) (m + n)
atSendIndex None accS accAt = accAt
atSendIndex (Recv ty s) accS accAt
  = atSendIndex s (Recv ty accS) accAt
atSendIndex (Send ty s) accS accAt
  = rewrite plusSuccRightSucc (pred m) n in
    atSendIndex s (Send ty accS) (S accAt)

-}
||| A (bidirectional) channel is parametrised by a session it must respect.
|||
||| It is implemented in terms of two low-level channels: one for sending
||| and one for receiving. This ensures that we never are in a situation
||| where a thread with session (Send Nat (Recv String ...)) sends a natural
||| number and subsequently performs a receive before the other party
||| to the communication had time to grab the Nat thus receiving it
||| instead of a String.
|||
||| The low-level channels can only carry values of a single type. And so
||| they are given respective union types corresponding to the types that
||| can be sent on the one hand and the ones that can be received on the
||| other.
||| These union types are tagged unions where if `ty` is at index `k` in
||| the list of types `tys` then `(k, v)` is a value of `Union tys` provided
||| that `v` has type `ty`.
|||
||| `sendStep`, `recvStep`, `seePrefix`, and `seen` encode the fact that
||| we have already performed some of the protocol and so the low-level
||| channels' respective types necessarily mention types that we won't
||| see anymore.
export
record Channel (s : Session m2 k2) where
  constructor MkChannel
  {sendStep : Nat}
  {recvStep : Nat}
  {0 start  : Session Closed k1}
  0 seen    : Seen recvStep sendStep start s

  sendChan : Threads.Channel (Union (SendTypes start))
  recvChan : Threads.Channel (Union (RecvTypes start))

||| Consume a linear channel with a `Recv ty` step at the head of the
||| session type in order to obtain a value of type `ty` together with
||| a linear channel for the rest of the session.
export
recv : LinearIO io =>
  Channel (Recv ty s) -@
  L1 io (Res ty (const (Channel s)))
recv (MkChannel {recvStep} seen sendCh recvCh) = do
  x@(Element k prf val) <- channelGet recvCh
  -- Here we check that we got the right message by projecting out of
  -- the union type using the current `recvStep`. Both ends should be
  -- in sync because of the `RecvDualTypes` and `SendDualTypes` lemmas.
  let Just val = prj (recvStep + 0) (atRecvIndex seen Z) x
    | Nothing => die1 "Error: invalid recv expected \{show recvStep} but got \{show k}"
  pure1 (val # MkChannel (Recv ty Refl seen) sendCh recvCh)

seenOpen : SeenOpen m n s o -> SeenOpen m n s (plug t o)
seenOpen None = ?zga_0
seenOpen (Recv ty x) = ?zga_1
seenOpen (Send ty x) = ?zga_2
seenOpen (Open x y) = ?zga_3

atFixIndex :
  Seen m n s (Fix o) ->
  Seen m n s (plug (Fix o) o)
atFixIndex (MkClosed s)   = let v := MkOpen s None in ?Zge
atFixIndex a = ?ag

unfold : LinearIO io =>
  Channel (Fix o) -@
  L1 io (Channel (plug (Fix o) o))
unfold (MkChannel seen sendCh recvCh) =
  pure1 (MkChannel ?ga sendCh recvCh)

{-

||| Consume a linear channel with a `Send ty` step at the head of the
||| session type in order to send a value of type `ty` and obtain a
||| linear channel for the rest of the session.
export
send : LinearIO io =>
  (1 _ : Channel (Send ty s)) ->
  ty ->
  L1 io (Channel s)
send (MkChannel {sendStep} seen sendCh recvCh) x = do
  let val = inj (sendStep + 0) (atSendIndex seen (Send ty s) Z) x
  channelPut sendCh val
  pure1 (MkChannel (Send ty seen) sendCh recvCh)

||| Discard the channel provided that the session has reached its `End`.
export
end : LinearIO io => Channel End -@ L io ()
end (MkChannel _ _ _) = do
  pure ()

||| Given a session, create a bidirectional communication channel and
||| return its two endpoints
export
makeChannel :
  LinearIO io =>
  (0 s : Session) ->
  L1 io (LPair (Channel s) (Channel (Dual s)))
makeChannel s = do
  sendChan <- Threads.makeChannel
  recvChan <- Threads.makeChannel
  let 1 posCh : Channel s
    := MkChannel None sendChan recvChan
  let 1 negCh : Channel (Dual s)
    := MkChannel None
         (rewrite SendDualTypes s in recvChan)
         (rewrite RecvDualTypes s in sendChan)
  pure1 (posCh # negCh)

||| Given a session and two functions communicating according to that
||| sesion, we can run the two programs concurrently and collect their
||| final results.
export
fork : (0 s : Session) ->
       (Channel       s  -@ L IO a) -@
       (Channel (Dual s) -@ L IO b) -@
       L IO (a, b)
fork s kA kB = do
  let 1 io = makeChannel s
  (posCh # negCh) <- io
  par (kA posCh) (kB negCh)
